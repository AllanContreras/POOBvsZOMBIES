package presentacion;
import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.io.File;
import java.io.IOException;

/**
 * Clase SeleccionModo que representa una ventana para que el jugador seleccione el modo de juego.
 * Ofrece tres opciones de modo: Jugador vs Máquina, Jugador vs Jugador y Máquina vs Máquina.
 * También reproduce música de fondo durante la selección del modo.
 */
public class SeleccionModo extends JFrame {

    /**
     * Clip de audio utilizado para reproducir música de fondo.
     */
    public Clip audioClip;

    /**
     * Constructor de la clase SeleccionModo.
     * Inicializa la ventana con los componentes necesarios, como los botones de selección de modo,
     * el botón para volver a la ventana principal, y la reproducción de música de fondo.
     *
     * @param ventanaPrincipal La ventana principal desde donde se invoca esta ventana.
     */
    public SeleccionModo(JFrame ventanaPrincipal) {
        setTitle("Seleccionar Modo");
        setSize(800, 500);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Fondo personalizado
        ImageIcon backgroundImage = new ImageIcon("src\\IMG\\Niveles.jpg");
        JPanel fondoPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage.getImage(), 0, 0, getWidth(), getHeight(), this);
            }
        };
        fondoPanel.setLayout(null);

        // Botón Volver
        JButton volverButton = new JButton("Volver");
        volverButton.setBounds(10, 10, 100, 30);
        volverButton.setForeground(Color.WHITE);
        volverButton.setContentAreaFilled(false);
        volverButton.setBorderPainted(false);
        volverButton.addActionListener(e -> {
            if (audioClip != null && audioClip.isRunning()) {
                audioClip.stop();
            }
            ventanaPrincipal.setVisible(true);
            dispose();
        });
        fondoPanel.add(volverButton);

        // Botones de niveles
        JButton JvsMButton = new JButton("JugadorVSMaquina");
        JButton JvsJButton = new JButton("JugadorVSJugador");
        JButton MvsMButton = new JButton("MaquinaVSMaquina");

        JvsMButton.setBounds(115, 180, 200, 50);
        JvsJButton.setBounds(291, 180, 200, 50);
        MvsMButton.setBounds(475, 180, 200, 50);

        // Configuración de botones
        JButton[] botones = {JvsMButton, JvsJButton, MvsMButton};
        for (JButton boton : botones) {
            boton.setForeground(Color.WHITE);
            boton.setContentAreaFilled(false);
            boton.setBorderPainted(false);
            fondoPanel.add(boton);
        }

        // Acción para cada nivel
        JvsMButton.addActionListener(e -> {
            if (audioClip != null && audioClip.isRunning()) {
                audioClip.stop();
            }
            new SeleccionPersonajes(this, "JvsM");
            setVisible(false);
        });

        JvsJButton.addActionListener(e -> {
            if (audioClip != null && audioClip.isRunning()) {
                audioClip.stop();
            }
            new SeleccionPersonajes(this, "JvsJ");
            setVisible(false);
        });
        MvsMButton.addActionListener(e -> {
            if (audioClip != null && audioClip.isRunning()) {
                audioClip.stop();
            }
            new SeleccionPersonajes(this, "MvsM");
            setVisible(false);
        });

        // Añadir fondoPanel a la ventana
        add(fondoPanel);

        // Reproducir música de fondo
        reproducirMusica("src\\sounds\\Theme.wav");

        setVisible(true);
    }

    /**
     * Reproduce música de fondo en bucle desde un archivo especificado.
     *
     * @param rutaArchivo La ruta del archivo de audio que se desea reproducir.
     */
    public void reproducirMusica(String rutaArchivo) {
        try {
            File archivoAudio = new File(rutaArchivo);
            AudioInputStream audioStream = AudioSystem.getAudioInputStream(archivoAudio);
            audioClip = AudioSystem.getClip();
            audioClip.open(audioStream);
            audioClip.loop(Clip.LOOP_CONTINUOUSLY);
            audioClip.start();
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "No se pudo cargar el archivo de audio.");
        }
    }
}



