package dominio;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import presentacion.TableroJugadorvsJugador;
import presentacion.TableroJugadorvsMaquina;


/**
 * La clase PoobvsZombies gestiona la lógica del juego de "Poob vs Zombis".
 * Crea y gestiona la interfaz de usuario, que incluye la selección de plantas, la colocación en el tablero, y las opciones de control del juego.
 */

public class PoobvsZombies {
    // Atributos de la clase
    private JPanel panelPersonajes;
    private JFrame contenedor;
    private List<String> personajesDisponibles;
    private String personajeSeleccionado;
    private boolean plantaSeleccionada = false;
    private String tipoPlantaSeleccionada = null;
    private boolean modoEliminarPlanta = false;

    /**
     * Constructor de la clase PoobvsZombies.
     *
     * @param contenedor El JFrame que contiene la interfaz de usuario.
     * @param filas El número de filas del tablero.
     * @param columnas El número de columnas del tablero.
     * @param personajes Lista de personajes disponibles para el jugador.
     */

    public PoobvsZombies(JFrame contenedor, int filas, int columnas, List<String> personajes) {
        this.contenedor = contenedor;
        this.personajesDisponibles = personajes;
        this.personajeSeleccionado = personajes.get(0);

    }


    /**
     * Crea el panel principal que incluye el tablero y los controles.
     *
     * @param celdas El arreglo 2D de celdas del tablero.
     * @return El panel principal con el tablero y los controles.
     */
    public JPanel crearPanelPrincipal(JPanel[][] celdas) {
        JPanel mainPanel = new JPanel(new BorderLayout());

        // Crear un JLayeredPane para manejar las capas
        JLayeredPane layeredPane = new JLayeredPane();
        layeredPane.setLayout(null); // Usamos null para manejar manualmente las posiciones y tamaños

        // Panel combinado de personajes y control
        JPanel controlPanel = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                try {
                    // Cargar la imagen de fondo
                    ImageIcon backgroundImage = new ImageIcon("src\\IMG\\fondo_control.png"); // Ajusta la ruta según tu imagen
                    g.drawImage(backgroundImage.getImage(), 0, 0, getWidth(), getHeight(), this);
                } catch (Exception e) {
                    System.out.println("No se pudo cargar la imagen de fondo: " + e.getMessage());
                }
            }
        };
        controlPanel.setBounds(0, 0, 800, 100); // Ajusta las dimensiones
        controlPanel.setOpaque(false); // Asegúrate de que el fondo no opaque otros componentes

        // Panel de personajes (parte izquierda del controlPanel)
        JPanel personajesPanel = crearPanelPersonajes(null);

        // Panel de botones (parte derecha del controlPanel)
        JPanel botonesPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
        botonesPanel.setOpaque(false); // Fondo transparente para que no tape la imagen

        // Contador de soles (primero en el orden)
        JLabel contadorSolesLabel = new JLabel("100"); // Inicializamos solo con el número 100
        contadorSolesLabel.setFont(new Font("Arial", Font.BOLD, 16));
        contadorSolesLabel.setForeground(Color.WHITE);
        botonesPanel.add(contadorSolesLabel);

// Incrementar soles automáticamente cada cierto tiempo
        Timer timer = new Timer(10000, e -> { // Cada 2 segundos
            int solesActuales = Integer.parseInt(contadorSolesLabel.getText()); // Solo el número
            solesActuales += 25; // Incremento de soles
            contadorSolesLabel.setText(String.valueOf(solesActuales)); // Actualiza solo con el número
        });
        timer.start();

        // Botón "Guardar"
        JButton guardarBtn = new JButton("Guardar");
        guardarBtn.setPreferredSize(new Dimension(85, 20));
        guardarBtn.setBackground(Color.GREEN);
        guardarBtn.addActionListener(e -> ((TableroJugadorvsMaquina) contenedor).guardarJuego());
        botonesPanel.add(guardarBtn);

        // Botón "Pausar"
        JButton pausarBtn = new JButton("Pausar");
        pausarBtn.setPreferredSize(new Dimension(75, 20));
        pausarBtn.setBackground(Color.YELLOW);
        pausarBtn.addActionListener(e -> ((TableroJugadorvsMaquina) contenedor).pausarJuego());
        botonesPanel.add(pausarBtn);  // Asegúrate de agregar el botón al panel de botones
        // Botón "Reanudar"
        JButton reanudarBtn = new JButton("Reanudar");
        reanudarBtn.setPreferredSize(new Dimension(89, 20));
        reanudarBtn.setBackground(Color.GREEN);
        reanudarBtn.addActionListener(e -> ((TableroJugadorvsMaquina) contenedor).reanudarJuego());
        botonesPanel.add(reanudarBtn);  // Asegúrate de agregar el botón al panel de botones

        // Botón "Remover Planta"
        JButton removerPlantaBtn = new JButton("Remover");
        removerPlantaBtn.setPreferredSize(new Dimension(90, 20));
        removerPlantaBtn.setBackground(Color.RED);
        removerPlantaBtn.addActionListener(e -> {
            // Cambiar el estado para indicar modo de eliminación
            modoEliminarPlanta = true;
            contenedor.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
        });
        botonesPanel.add(removerPlantaBtn);


        // Agregar los sub-paneles al controlPanel
        controlPanel.add(personajesPanel, BorderLayout.WEST); // Panel de personajes a la izquierda
        controlPanel.add(botonesPanel, BorderLayout.EAST); // Botones a la derecha

        layeredPane.add(controlPanel, Integer.valueOf(1)); // Agregar a la capa superior

        // Panel del tablero (capa más baja)
        JPanel tableroPanel = crearPanelTablero(celdas);
        tableroPanel.setBounds(0, 100, 800, 600); // Ajusta según el tamaño del tablero
        layeredPane.add(tableroPanel, Integer.valueOf(0)); // Capa más baja

        // Agregar el layeredPane al mainPanel
        mainPanel.add(layeredPane, BorderLayout.CENTER);

        return mainPanel;
    }







    public JPanel crearPanelTablero(JPanel[][] celdas) {
        JPanel tableroPanel = new JPanel(new GridLayout(celdas.length, celdas[0].length));
        tableroPanel.setBackground(new Color(20, 80, 20)); // Fondo oscuro entre celdas

        for (int i = 0; i < celdas.length; i++) {
            for (int j = 0; j < celdas[i].length; j++) {
                JPanel cell = new JPanel();
                cell.setLayout(new OverlayLayout(cell));
                // Borde personalizado con sombras
                cell.setBorder(BorderFactory.createMatteBorder(
                        1, // top
                        1, // left
                        1, // bottom
                        1, // right
                        new Color(30, 90, 30) // color del borde
                ));

                // Efecto de sombreado suave
                cell.setOpaque(true);
                cell.setBackground(new Color(25, 100, 25));

                // Capas: Fondo, Planta, Proyectil, Zombi
                JLabel fondoLabel = new JLabel(cargarImagen("src\\IMG\\fondo_tablero.jpg"));
                fondoLabel.setAlignmentX(0.5f);
                fondoLabel.setAlignmentY(0.5f);

                JLabel plantaLabel = new JLabel();
                plantaLabel.setAlignmentX(0.5f);
                plantaLabel.setAlignmentY(0.5f);

                JLabel proyectilLabel = new JLabel();
                proyectilLabel.setAlignmentX(0.5f);
                proyectilLabel.setAlignmentY(0.5f);

                JLabel zombieLabel = new JLabel();
                zombieLabel.setAlignmentX(0.5f);
                zombieLabel.setAlignmentY(0.5f);

                // Añadir capas en orden
                cell.add(zombieLabel);
                cell.add(proyectilLabel);
                cell.add(plantaLabel);
                cell.add(fondoLabel);
                // Colocar podadora automáticamente en la primera fila
                if (i == 0 && j == 0) {
                    JLabel podadoraLabel = new JLabel(new ImageIcon("src\\IMG\\Podadora1.png"));
                    podadoraLabel.setHorizontalAlignment(SwingConstants.CENTER);
                    podadoraLabel.setVerticalAlignment(SwingConstants.CENTER);
                    cell.add(podadoraLabel);
                }
                dominio.GestorPlantas gestorPlantas = new dominio.GestorPlantas(celdas, contenedor);






                // Configurar eventos de clic
                int fila = i, columna = j;
                cell.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (modoEliminarPlanta) {
                            // Verificar si hay una planta en esta celda
                            if (gestorPlantas.hayPlantaEnCelda(fila, columna)) {
                                // Llamar a removerPlanta
                                gestorPlantas.removerPlanta(fila, columna);
                                modoEliminarPlanta = false;
                                contenedor.setCursor(Cursor.getDefaultCursor());
                            }
                        } else if (plantaSeleccionada && tipoPlantaSeleccionada != null) {
                            ((TableroJugadorvsMaquina) contenedor).colocarPlanta(fila, columna);
                        }
                    }
                });




                celdas[i][j] = cell;
                tableroPanel.add(cell);
            }
        }

        return tableroPanel;
    }
    public ImageIcon cargarImagen(String ruta) {
        try {
            return new ImageIcon(ruta);
        } catch (Exception e) {
            System.out.println("No se pudo cargar la imagen: " + ruta);
            return null; // Devuelve null si no se encuentra la imagen
        }
    }


    public JPanel crearPanelPersonajes(ActionListener agregarPlantaListener) {
        panelPersonajes = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panelPersonajes.setOpaque(false); // Hacer transparente el panel principal
        panelPersonajes.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        for (String personaje : personajesDisponibles) {
            JPanel btnPanel = crearPanelPersonaje(personaje, agregarPlantaListener);
            panelPersonajes.add(btnPanel);
        }

        return panelPersonajes;
    }

    public JPanel crearPanelPersonaje(String personaje, ActionListener agregarPlantaListener) {
        JPanel btnPanel = new JPanel();
        btnPanel.setPreferredSize(new Dimension(60, 70));
        btnPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        btnPanel.setOpaque(false); // Hacer transparente el fondo del panel

        agregarImagenPersonaje(btnPanel, personaje);
        agregarNombrePersonaje(btnPanel, personaje);

        btnPanel.addMouseListener(crearListenerPersonaje(personaje, btnPanel, agregarPlantaListener));
        return btnPanel;
    }

    public void agregarImagenPersonaje(JPanel btnPanel, String personaje) {
        String rutaImagen = obtenerRutaImagenPersonaje(personaje);
        if (rutaImagen != null) {
            ImageIcon icon = new ImageIcon(rutaImagen);
            Image img = icon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);
            JLabel imageLabel = new JLabel(new ImageIcon(img));
            imageLabel.setHorizontalAlignment(JLabel.CENTER);
            btnPanel.add(imageLabel);
        }
    }

    public void agregarNombrePersonaje(JPanel btnPanel, String personaje) {
        JLabel nameLabel = new JLabel(personaje);
        nameLabel.setForeground(Color.WHITE);
        nameLabel.setHorizontalAlignment(JLabel.CENTER);
        nameLabel.setFont(new Font("Arial", Font.PLAIN, 9));
        btnPanel.add(nameLabel);
    }


    public MouseListener crearListenerPersonaje(String personaje, JPanel panel, ActionListener agregarPlantaListener) {
        return new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                plantaSeleccionada = true;
                tipoPlantaSeleccionada = personaje; // Ahora accesible
                resaltarPanelSeleccionado(panel);
                contenedor.setCursor(new Cursor(Cursor.HAND_CURSOR));
                System.out.println("Planta seleccionada: " + tipoPlantaSeleccionada); // Debug
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                panel.setBorder(BorderFactory.createLineBorder(Color.WHITE));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (!personaje.equals(tipoPlantaSeleccionada)) {
                    panel.setBorder(BorderFactory.createLineBorder(Color.GRAY));
                }
            }
        };
    }





    public void resaltarPanelSeleccionado(JPanel panelSeleccionado) {
        for (Component comp : panelPersonajes.getComponents()) {
            if (comp instanceof JPanel) {
                ((JPanel) comp).setBorder(BorderFactory.createLineBorder(Color.GRAY));
            }
        }
        panelSeleccionado.setBorder(BorderFactory.createLineBorder(Color.GREEN, 2));
    }
    public void reiniciarResaltadoPersonajes() {
        for (Component comp : panelPersonajes.getComponents()) {
            if (comp instanceof JPanel) {
                ((JPanel) comp).setBorder(BorderFactory.createLineBorder(Color.GRAY));
            }
        }
    }
    public void configurarManejadorPersonajes(BiConsumer<String, JPanel> manejador) {
        for (Component comp : panelPersonajes.getComponents()) {
            if (comp instanceof JPanel) {
                JPanel panelPersonaje = (JPanel) comp;

                panelPersonaje.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        String personaje = obtenerNombrePersonaje(panelPersonaje); // Obtén el personaje asociado al panel
                        if (personaje != null) {
                            plantaSeleccionada = true;
                            tipoPlantaSeleccionada = personaje;
                            resaltarPanelSeleccionado(panelPersonaje);
                            contenedor.setCursor(new Cursor(Cursor.HAND_CURSOR));
                            System.out.println("Planta seleccionada: " + tipoPlantaSeleccionada); // Debug
                            manejador.accept(personaje, panelPersonaje); // Notifica al manejador
                        } else {
                            System.out.println("Error: No se pudo identificar el personaje.");
                        }
                    }
                });
            }
        }
    }



    private String obtenerNombrePersonaje(JPanel panel) {
        for (Component comp : panel.getComponents()) {
            if (comp instanceof JLabel) {
                return ((JLabel) comp).getText();
            }
        }
        return null;
    }

    public String obtenerRutaImagenPersonaje(String personaje) {
        Map<String, String> rutasImagenes = new HashMap<>();
        rutasImagenes.put("Girasol", "src\\IMG\\Girasol.png");
        rutasImagenes.put("Evolver", "src\\IMG\\Evolver.png");
        rutasImagenes.put("Planta", "src\\IMG\\Planta.png");
        rutasImagenes.put("Nuez", "src\\IMG\\Nuez.png");
        rutasImagenes.put("PapaMina", "src\\IMG\\papaMina.png");
        rutasImagenes.put("EciPlanta", "src\\IMG\\EciPlanta.png");

        return rutasImagenes.get(personaje);
    }

    public boolean isPlantaSeleccionada() {
        return plantaSeleccionada;
    }

    public String getTipoPlantaSeleccionada() {
        return tipoPlantaSeleccionada;
    }

    public void resetearSeleccion() {
        plantaSeleccionada = false;
        tipoPlantaSeleccionada = null;
        contenedor.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        reiniciarResaltadoPersonajes();
    }
}

