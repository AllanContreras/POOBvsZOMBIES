package presentacion;

import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * La clase SeleccionPersonajes representa una ventana de selección de personajes
 * para un juego. Permite a los usuarios seleccionar personajes de un conjunto
 * predefinido y realizar una acción dependiendo del modo de juego seleccionado.
 */
public class SeleccionPersonajes extends JFrame {

    private List<String> personajesSeleccionados; // Lista para almacenar los personajes seleccionados
    public Clip audioClip; // Variable para almacenar el clip de audio que se reproduce en la ventana

    /**
     * Constructor que inicializa la ventana de selección de personajes.
     *
     * @param ventanaAnterior La ventana desde la cual se accedió a la pantalla de selección.
     * @param modoSeleccionado El modo de juego seleccionado (por ejemplo, "JvsM", "JvsJ", "MvsM").
     */
    public SeleccionPersonajes(JFrame ventanaAnterior, String modoSeleccionado) {
        setTitle("Seleccionar Personajes");
        setSize(800, 500);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        personajesSeleccionados = new ArrayList<>();

        // Fondo personalizado con oscurecimiento
        ImageIcon backgroundImage = new ImageIcon("src\\IMG\\fondo_personajes.jpg");
        JPanel fondoPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                // Dibujar la imagen de fondo
                g.drawImage(backgroundImage.getImage(), 0, 0, getWidth(), getHeight(), this);

                // Dibujar un rectángulo semitransparente para oscurecer
                Color overlayColor = new Color(0, 0, 0, 150); // Negro con 150 de transparencia
                g.setColor(overlayColor);
                g.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        fondoPanel.setLayout(null);

        // Título de la ventana
        JLabel titulo = new JLabel("Selecciona tus personajes para  " + modoSeleccionado, SwingConstants.CENTER);
        titulo.setFont(new Font("Arial", Font.BOLD, 18));
        titulo.setForeground(Color.WHITE);
        titulo.setBounds(200, 20, 400, 30);
        fondoPanel.add(titulo);

        // Panel para personajes
        JPanel personajesPanel = new JPanel();
        personajesPanel.setBounds(50, 100, 700, 250);
        personajesPanel.setOpaque(false); // Hacer transparente para el fondo
        personajesPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 20)); // Espaciado entre personajes

        // Array de personajes y sus imágenes asociadas
        String[] personajes = {"Girasol", "Planta", "Nuez", "PapaMina", "EciPlanta", "Evolver"};
        String[] imagenes = {
                "src\\IMG\\Girasol.png",
                "src\\IMG\\Planta.png",
                "src\\IMG\\Nuez.png",
                "src\\IMG\\papaMina.png",
                "src\\IMG\\EciPlanta.png",
                "src\\IMG\\Evolver",
        };

        // Creación de los paneles para cada personaje
        for (int i = 0; i < personajes.length; i++) {
            String personaje = personajes[i];
            String imagenPath = imagenes[i];

            // Crear un panel con diseño personalizado
            JPanel personajePanel = new SeleccionPersonajes.RoundedPanel(20, new Color(255, 255, 255, 100));
            personajesPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 20));
            personajePanel.setPreferredSize(new Dimension(120, 150)); // Tamaño del cuadro
            personajePanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

            // Imagen del personaje (redimensionada)
            ImageIcon originalIcon = new ImageIcon(imagenPath);
            Image imagenEscalada = originalIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            JLabel imagenLabel = new JLabel(new ImageIcon(imagenEscalada));
            imagenLabel.setHorizontalAlignment(SwingConstants.CENTER);

            // Nombre del personaje
            JLabel nombreLabel = new JLabel(personaje, SwingConstants.CENTER);
            nombreLabel.setForeground(Color.BLACK);
            nombreLabel.setFont(new Font("Arial", Font.BOLD, 14));

            personajePanel.add(imagenLabel, BorderLayout.CENTER);
            personajePanel.add(nombreLabel, BorderLayout.SOUTH);

            // Selección visual con borde verde al seleccionar
            personajePanel.addMouseListener(new MouseAdapter() {
                private boolean seleccionado = false;

                @Override
                public void mouseClicked(MouseEvent e) {
                    if (!seleccionado) {
                        personajesSeleccionados.add(personaje);
                        personajePanel.setBorder(BorderFactory.createLineBorder(Color.GREEN, 4)); // Borde verde
                        seleccionado = true;
                    } else {
                        personajesSeleccionados.remove(personaje);
                        personajePanel.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2)); // Borde blanco
                        seleccionado = false;
                    }

                    personajePanel.repaint();
                    personajePanel.revalidate();
                }
            });

            personajesPanel.add(personajePanel); // Añadir al panel principal
        }

        fondoPanel.add(personajesPanel);

        // Botón de confirmar selección
        JButton confirmarButton = new JButton("Confirmar");
        confirmarButton.setBounds(300, 400, 200, 40);
        confirmarButton.addActionListener(e -> {
            if (!personajesSeleccionados.isEmpty()) {
                // Mostrar los personajes seleccionados
                JOptionPane.showMessageDialog(this, "Has seleccionado: " + personajesSeleccionados);

                // Comprobar el modo seleccionado y tomar acciones correspondientes
                if (modoSeleccionado.equals("JvsM")) {
                    detenerMusica();
                    new TableroJugadorvsMaquina(5, 12, personajesSeleccionados); // Pasar personajes si es necesario
                    dispose(); // Cierra la ventana de selección de personajes

                } else if (modoSeleccionado.equals("JvsJ") || modoSeleccionado.equals("MvsM")) {
                    // Si el modo es Jugador vs Jugador o Maquina vs Maquina, abrir ventana para seleccionar personajes zombies
                    new SeleccionPersonajesZombies(this, personajesSeleccionados, modoSeleccionado);
                    detenerMusica(); // Detener música
                    dispose(); // Cierra la ventana de selección de personajes

                } else {
                    JOptionPane.showMessageDialog(this, "Modo desconocido.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Por favor selecciona al menos un personaje.");
            }
        });
        fondoPanel.add(confirmarButton);

        add(fondoPanel);

        // Reproducir música
        reproducirMusica("src\\sounds\\Theme.wav");

        setVisible(true);
    }

    /**
     * Reproduce música de fondo en un bucle continuo.
     *
     * @param rutaArchivo Ruta al archivo de música que se desea reproducir.
     */
    public void reproducirMusica(String rutaArchivo) {
        try {
            File archivoAudio = new File(rutaArchivo);
            AudioInputStream audioStream = AudioSystem.getAudioInputStream(archivoAudio);
            audioClip = AudioSystem.getClip();
            audioClip.open(audioStream);
            audioClip.loop(Clip.LOOP_CONTINUOUSLY);
            audioClip.start();
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "No se pudo cargar el archivo de audio.");
        }
    }

    /**
     * Detiene la música de fondo si está reproduciéndose.
     */
    public void detenerMusica() {
        if (audioClip != null && audioClip.isRunning()) {
            audioClip.stop();
        }
    }

    /**
     * Clase interna que permite crear paneles con esquinas redondeadas.
     */
    static class RoundedPanel extends JPanel {
        private int cornerRadius;
        private Color backgroundColor;

        public RoundedPanel(int radius, Color bgColor) {
            this.cornerRadius = radius;
            this.backgroundColor = bgColor;
            setOpaque(false);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setColor(backgroundColor);
            g2.fillRoundRect(0, 0, getWidth(), getHeight(), cornerRadius, cornerRadius);
        }
    }
}
